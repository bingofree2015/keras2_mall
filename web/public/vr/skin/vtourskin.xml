<krpano>

	<!-- krpano 1.19.pr5 - Virtual Tour Skin -->

	<!-- skin_base - the base skin image -->
	<style name="skin_base" url="../img/1.png" />
	<style name="skin_base_back" url="../img/2.png" />
	<style name="skin_base_google" url="../img/0.png" />

	<!-- VR in and out button  -->
	<layer name="skin_btn_vr" 
	   style="skin_base" keep="true" align="bottom" x="45%" y="5%" scale="0.5" zorder="1"
	   onclick="webvr.enterVR(); set(layer[skin_btn_pano].visible,true); set(layer[skin_btn_google].visible,true);
	   " />

	<layer name="skin_btn_pano" 
	   style="skin_base_back" keep="true" align="bottom" x="45%" y="5%" scale="0.5" visible="false" zorder="1"
	   onclick="set(layer[skin_btn_vr].visible, true); set(visible, false);
	   set(layer[skin_btn_google].visible,false);
	    webvr.exitVR();"  />

		<layer name="skin_btn_google" 
	   style="skin_base_google" keep="true" align="center" width="100%" height="100%" visible="false" enabled="false" zorder="0"  />





	<!-- question_start action %1=question_hotspot %2=answer_a %3=answer_b %4=answer_c  -->
	<action name="question_start">
	set(alpha,0);set(enabled,false);
		tween(hotspot[%1].alpha,1,1);
		tween(hotspot[%2].alpha,1,1);
		tween(hotspot[%3].alpha,1,1);
		tween(hotspot[%4].alpha,1,1);
		tween(hotspot[background].alpha,1,1);
	</action>

	<!-- question_wronganswer action %1=question_hotspot %2=answer_a %3=answer_b %4=question  -->
	<action name="question_wronganswer">
	tween(alpha,0,1);
		tween(hotspot[%1].alpha,0,1);
		tween(hotspot[%2].alpha,0,1);
		tween(hotspot[%3].alpha,0,1);
		tween(hotspot[%4].alpha,1,1);
		tween(hotspot[background].alpha,0,1);
		set(hotspot[%4].enabled,true);
	</action>

	<!-- show text content action  -->
	<action name="show_text">
	set(alpha,0,1);
		tween(hotspot[%1].alpha,1,1);
		tween(hotspot[background].alpha,1,1);
	</action>

	<!-- information message style -->

	<style name="skin_enterhotspotstyle"  scale="0.5" edge="top" distorted="true"
	       tooltip=""
	       onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); tween(hotspot[background].alpha,0,1); ); );"
	       onover="tween(scale,0.55);"
	       onout="tween(scale,0.5);"
	       onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
	       /> 

	<style name="skin_hotspotstyle_sxtnanjian" url="hotspots/san_xi_tang_san_qu.png" scale="0.5" 		edge="top" distorted="true"
	       tooltip=""
	       onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); ); );"
	       onover="tween(scale,0.55);"
	       onout="tween(scale,0.5);"
	       onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
	       /> 

	       <!-- make the png animate -->
	<action name="do_crop_animation">
			registerattribute(xframes, calc((imagewidth / %1) BOR 0));
			registerattribute(yframes, calc((imageheight / %2) BOR 0));
			registerattribute(frames, calc(xframes * yframes));
			registerattribute(frame, 0);
		 
			set(crop, '0|0|%1|%2');
		 
			setinterval(calc('crop_anim_' + name), calc(1.0 / %3),
				if(loaded,
					inc(frame);
					if(frame GE frames, if(onlastframe !== null, onlastframe() ); set(frame,0); );
					mod(xpos, frame, xframes);
					div(ypos, frame, xframes);
					Math.floor(ypos);
					mul(xpos, %1);
					mul(ypos, %2);
					calc(crop, xpos + '|' + ypos + '|%1|%2');
				  ,
					clearinterval(calc('crop_anim_' + name));
				  );
			  );
	</action>

<events name="quit_text_event"
	 keep="true" onviewchanged="quit_text"/>

	<!-- quit_text action -->
	<action name="quit_text">
	if(hotspot[word_zzrh].alpha == 1,
	getlooktodistance(d, hotspot[word_zzrh].ath, hotspot[word_zzrh].atv);
    if(d GT 50,tween(hotspot[word_zzrh].alpha,0,1);tween(hotspot[touchhotpot_zzrh].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_pacxt].alpha == 1,
	getlooktodistance(d, hotspot[word_pacxt].ath, hotspot[word_pacxt].atv);
    if(d GT 50,tween(hotspot[word_pacxt].alpha,0,1);tween(hotspot[touchhotpot_pacxt].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_sxtft].alpha == 1,
	getlooktodistance(d, hotspot[word_sxtft].ath, hotspot[word_sxtft].atv);
    if(d GT 55,tween(hotspot[word_sxtft].alpha,0,1);tween(hotspot[touchhotpot_sxtft].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_sxt].alpha == 1,
	getlooktodistance(d, hotspot[word_sxt].ath, hotspot[word_sxt].atv);
    if(d GT 50,tween(hotspot[word_sxt].alpha,0,1);tween(hotspot[touchhotpot_sxt].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[pic_byt].alpha == 1,
	getlooktodistance(d, hotspot[pic_byt].ath, hotspot[pic_byt].atv);
    if(d GT 50,tween(hotspot[pic_byt].alpha,0,1);tween(hotspot[touchhotpot_byt].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[pic_zqt].alpha == 1,
	getlooktodistance(d, hotspot[pic_zqt].ath, hotspot[pic_zqt].atv);
    if(d GT 80,tween(hotspot[pic_zqt].alpha,0,1);tween(hotspot[touchhotpot_zqt].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_qzqx].alpha == 1,
	getlooktodistance(d, hotspot[word_qzqx].ath, hotspot[word_qzqx].atv);
    if(d GT 80,tween(hotspot[word_qzqx].alpha,0,1);tween(hotspot[touchhotpot_qzqx].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_xishaojian_tieluo].alpha == 1,
	getlooktodistance(d, hotspot[word_xishaojian_tieluo].ath, hotspot[word_xishaojian_tieluo].atv);
    if(d GT 50,tween(hotspot[word_xishaojian_tieluo].alpha,0,1);tween(hotspot[touchhotpot_xishaojian_tieluo].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_12shengchen].alpha == 1,
	getlooktodistance(d, hotspot[word_12shengchen].ath, hotspot[word_12shengchen].atv);
    if(d GT 50,tween(hotspot[word_12shengchen].alpha,0,1);tween(hotspot[touchhotpot_12shengchen].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_cltz].alpha == 1,
	getlooktodistance(d, hotspot[word_cltz].ath, hotspot[word_cltz].atv);
    if(d GT 50,tween(hotspot[word_cltz].alpha,0,1);tween(hotspot[touchhotpot_cltz].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_chuangzhang].alpha == 1,
	getlooktodistance(d, hotspot[word_chuangzhang].ath, hotspot[word_chuangzhang].atv);
    if(d GT 50,tween(hotspot[word_chuangzhang].alpha,0,1);tween(hotspot[touchhotpot_chuangzhang].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_longpaoyigui].alpha == 1,
	getlooktodistance(d, hotspot[word_longpaoyigui].ath, hotspot[word_longpaoyigui].atv);
    if(d GT 50,tween(hotspot[word_longpaoyigui].alpha,0,1);tween(hotspot[touchhotpot_longpaoyigui].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_duobaoge].alpha == 1,
	getlooktodistance(d, hotspot[word_duobaoge].ath, hotspot[word_duobaoge].atv);
    if(d GT 50,tween(hotspot[word_duobaoge].alpha,0,1);tween(hotspot[touchhotpot_duobaoge].alpha,1,1);tween(hotspot[background].alpha,0,1);););

	if(hotspot[word_xiyangzhong].alpha == 1,
	getlooktodistance(d, hotspot[word_xiyangzhong].ath, hotspot[word_xiyangzhong].atv);
    if(d GT 50,tween(hotspot[word_xiyangzhong].alpha,0,1);tween(hotspot[touchhotpot_xiyangzhong].alpha,1,1);tween(hotspot[background].alpha,0,1);););
	</action>















	<!-- skin settings (can be overridden in the tour.xml) -->
	<skin_settings maps="false"
	               maps_type="google"
	               maps_bing_api_key=""
	               maps_zoombuttons="false"
	               gyro="true"
	               webvr="true"
	               littleplanetintro="false"
	               title="true"
	               thumbs="true"
	               thumbs_width="120" thumbs_height="80" thumbs_padding="10" thumbs_crop="0|40|240|160"
	               thumbs_opened="false"
	               thumbs_text="false"
	               thumbs_dragging="true"
	               thumbs_onhoverscrolling="false"
	               thumbs_scrollbuttons="false"
	               thumbs_scrollindicator="false"
	               thumbs_loop="false"
	               tooltips_buttons="false"
	               tooltips_thumbs="false"
	               tooltips_hotspots="false"
	               tooltips_mapspots="false"
	               deeplinking="false"
	               loadscene_flags="MERGE"
	               loadscene_blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)"
	               loadscene_blend_prev="SLIDEBLEND(0.5, 180, 0.75, linear)"
	               loadscene_blend_next="SLIDEBLEND(0.5,   0, 0.75, linear)"
	               loadingtext="loading..."
	               layout_width="100%"
	               layout_maxwidth="814"
	               controlbar_width="-24"
	               controlbar_height="40"
	               controlbar_offset="20"
	               controlbar_offset_closed="-40"
	               controlbar_overlap.no-fractionalscaling="10"
	               controlbar_overlap.fractionalscaling="0"
	               design_skin_images="vtourskin.png"
	               design_bgcolor="0x2D3E50"
	               design_bgalpha="0.8"
	               design_bgborder="0"
	               design_bgroundedge="1"
	               design_bgshadow="0 4 10 0x000000 0.3"
	               design_thumbborder_bgborder="3 0xFFFFFF 1.0"
	               design_thumbborder_padding="2"
	               design_thumbborder_bgroundedge="0"
	               design_text_css="color:#FFFFFF; font-family:Arial;"
	               design_text_shadow="1"
	               />




	<!-- mouse / touch / keyboard(button) control settings - http://krpano.com/docu/xml/#control -->
	<control mouse="drag"
	         touch="drag"
	         zoomtocursor="false"
	         zoomoutcursor="false"
	         draginertia="0.1"
	         dragfriction="0.9"
	         movetoaccelerate="1.0"
	         movetospeed="10.0"
	         movetofriction="0.8"
	         keybaccelerate="0.09"
	         keybfriction="0.94"
	         keybfovchange="0.25"
	         mousefovchange="1.0"
	         fovspeed="3.0"
	         fovfriction="0.9"
	         bouncinglimits="true"
	         />

	<!-- mouse cursors - http://krpano.com/docu/xml/#cursors -->
	<cursors standard="default"
	         dragging="move"
	         moving="move"
	         />


	<!-- ensure stagescale 2x for mobile devices (regardless if mobilescale is 0.5 or 1.0) -->
	<krpano stagescale="calc:stagescale * 2" if="stagescale LT 1.0" devices="mobile" />


	<!-- include VR support - http://krpano.com/plugins/webvr/ -->
	<include url="%SWFPATH%/plugins/webvr.xml" devices="html5" />

	<!-- overwrite some settings from the webvr.xml for the skin integration -->
	<plugin name="WebVR" keep="true" devices="html5"
	        pluginurl="%SWFPATH%/plugins/webvr.js"
					mobilevr_orientationlock="false"
	        multireslock.desktop="true"
	        multireslock.mobile.or.tablet="false"
	        mobilevr_support="true"
	        mobilevr_fake_support="true"
	        onavailable="removelayer(webvr_enterbutton); skin_arrange_buttons(); webvr_onavailable();"
	        onentervr="skin_showloading(false); webvr_onentervr(); webvr_setup(); "
	        onexitvr="webvr_onexitvr(); webvr_setup(); "
	        />


	<!-- show a 'rotate the device' info when the mobile device is in portrait orientation in VR mode -->
	<layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile"
	       url="alertMessage.png" width="70%" height="prop"
	       align="top" edge="center" y="50%"
	       autoalpha="true" alpha="0.0"
	       enabled="false" zorder="2"
	       />
	<layer name="webvr_rotate_to_landscape_request_background" keep="true" vr="true" devices="mobile"
	       url="SC2_bg.jpg"
	       align="center" width="100%" height="prop" 
	       autoalpha="true" alpha="0.0"
	       enabled="false" zorder="1"
	       />

	<layer name="webvr_rotate_to_landscape_request_background" keep="true" vr="true" devices="mobile"
	       url="SC2_bg.jpg"
	       edge="center" width="500%" height="prop"
	       zorder="1"
	       autoalpha="true" alpha="0.0"
	       enabled="false"
	       />


	<events name="webvr_events" keep="true" devices="html5"
	        onresize.mobile="webvr_act_as_gyro_in_portrait_mode();"
	        onviewchange=""
	        />

	<action name="webvr_setup">
		if(webvr.isenabled,
			copy(loadscene_flags_backup, skin_settings.loadscene_flags);
			set(skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|NOPREVIEW);
			webvr_act_as_gyro_in_portrait_mode(true);
			if(scene.count GT 1,
				set(hotspot[webvr_prev_scene].visible, true);
				set(hotspot[webvr_next_scene].visible, true);
				set(events[webvr_events].onviewchange, webvr_menu_following());
			  );
		  ,
			if(loadscene_flags_backup !== null, copy(skin_settings.loadscene_flags, loadscene_flags_backup));
			tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
			tween(layer[webvr_rotate_to_landscape_request_background].alpha, 0.0, 0.0);
			set(hotspot[webvr_prev_scene].visible, false);
			set(hotspot[webvr_next_scene].visible, false);
			set(events[webvr_events].onviewchange, null);
		  );
	</action>

	<action name="webvr_act_as_gyro_in_portrait_mode">
		if(device.mobile AND webvr.isenabled,
			div(aspect, stagewidth, stageheight);
			if(aspect != lastaspect OR '%1' == 'true',
				copy(lastaspect, aspect);
				if(stagewidth GT stageheight,
					<!-- landscape orientation - use stereo rendering and a direct/fast gyro sensor mode -->
					set(display.stereo, true);
					set(webvr.mobilevr_sensor_mode, 3);
					webvr.update();
					tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
					tween(layer[webvr_rotate_to_landscape_request_background].alpha, 0.0, 0.0);
				  ,
					<!-- portrait orientation - use normal rendering and a smoother/slower gyro sensor mode -->
					set(display.stereo, false);
					set(webvr.mobilevr_sensor_mode, 1);
					webvr.update();
					tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0);
					tween(layer[webvr_rotate_to_landscape_request_background].alpha, 1.0);
				  );
			  );
		  ,
			set(lastaspect, 0);
		  );
	</action>

	<!-- VR support -->

	<!-- skin_glow - button glowing (if additional ondown,onup,onout,over events are needed, this style provides ondown2,onup2,onover2,onout2 events) -->
	<style name="skin_glow"
	       ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
	       onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); if(onover2, onover2() );"
	       onout="if(skin_lockglow === name AND !pressed, skin_buttonglow(null);delete(skin_lockglow); ); if(onout2, onout2() );"
	       onup="if(onup2, onup2()); delayedcall(0, if(hovering AND enabled, skin_buttonglow(get(name),0.3); , skin_buttonglow(null);delete(skin_lockglow); ); );"
	       />

	<!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
	<style name="skin_thumbtext_style" url="%SWFPATH%/plugins/textfield.swf" align="bottom" width="100%" autoheight="true" y="5" enabled="false" background="false" border="false" css="calc:skin_settings.design_text_css + ' text-align:center; font-size:10px;'" textshadow="get:skin_settings.design_text_shadow" />

    <!-- skin_hotspotstyle - style for the hotspots -->     
    <style name="skin_hotspotstyle" url="vtourskin_hotspot.png"
		scale="0.5" edge="top" distorted="true"            tooltip=""            onclick="if(linkedscene, set(enabled,false);
		skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default,
		loadscene(get(linkedscene),null,get(skin_setti ngs.loadscene_flags),get(skin_settings.loadscene_blend));
		skin_updatescroll(); ); );"            onover="tween(scale,0.55);" onout="tween(scale,0.5);"
		onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title);
		loadstyle(skin_tooltips); );"            />     <style name="skin_hotspotstyle_san_xi_tang_er_qu" url="san_xi_tang_er_qu.png" scale="0.5"
		edge="top" distorted="true"            tooltip=""            onclick="if(linkedscene, set(enabled,false);
		skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default,
		loadscene(get(linkedscene),null,get(skin_setti ngs.loadscene_flags),get(skin_settings.loadscene_blend));
		skin_updatescroll(); ); );"            onover="tween(scale,0.55);" onout="tween(scale,0.5);"
		onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title);
		loadstyle(skin_tooltips); );"            />

	<!-- skin_tooltip - style for the thumb, hotspot and mapspot tooltips -->
	<style name="skin_tooltips"
	       onover.mouse="copy(layer[skin_tooltip].html, tooltip);
	                     set(layer[skin_tooltip].visible, true);
	                     tween(layer[skin_tooltip].alpha, 1.0, 0.1);
	                     asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       onout.mouse="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       />


	<!-- the tooltip textfield -->
	<layer name="skin_tooltip" keep="true"
	       url="%SWFPATH%/plugins/textfield.swf"
	       parent="STAGE"
	       visible="false" alpha="0" enabled="false" zorder="2"
	       align="lefttop" edge="bottom" oy="-2" width="200" autoheight="true"
	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
	       border="false" bordercolor="0x000000" borderalpha="1.0" borderwidth="1.0" roundedge="0"
	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
	       textshadow="get:skin_settings.design_text_shadow" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
	       css="calc:skin_settings.design_text_css + ' text-align:center; font-size:16px;'"
	       html=""
	       />




	<!-- gyro plugin -->
	<plugin name="skin_gyro" keep="true" url="" html5_url="%SWFPATH%/plugins/gyro2.js" devices="html5" enabled="false" onavailable="skin_arrange_buttons();" />


	<!-- skin events -->
	<events name="skin_events" keep="true"
	        onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
	        onnewpano="skin_showloading(true); skin_update_scene_infos(); skin_deeplinking_update_url();"
	        onremovepano="skin_showloading(true);"
	        onloadcomplete="skin_showloading(false);"
	        onidle="skin_deeplinking_update_url();"
	        onresize="skin_onresize();"
	        onenterfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '64|576|64|64');"
	        onexitfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '0|576|64|64');"
	        onkeydown="skin_keydown_event();"
	        />


	<!-- skin actions -->
	<action name="skin_startup">

		<!-- apply skin settings on startup -->
		if(skin_settings.thumbs,
			if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );
			copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);
			if(skin_settings.thumbs_onhoverscrolling AND device.mouse,
				set(layer[skin_thumbs].draggable, false);
				set(layer[skin_thumbs].onhover_autoscrolling, true);
			  );
		  );

		if(skin_settings.gyro AND !device.desktop AND device.html5,
			copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url);
		  );

		if(skin_settings.webvr AND device.html5 AND device.webgl,
			copy(plugin[WebVR].url, plugin[WebVR].pluginurl);
		  );

		if(skin_settings.maps == true,
			set(layer[skin_btn_map].visible, true);

			if(device.flash,
				copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
				set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.swf');
			  ,
				if(skin_settings.maps_type == 'bing',
					copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
					set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.js');
				  ,
					set(layer[skin_map].url, '%SWFPATH%/plugins/googlemaps.js');
				  );
			  );
		  );

		if(skin_settings.littleplanetintro AND (device.webgl OR device.flash),
			skin_setup_littleplanetintro();
		  );
		
		skin_addthumbs();
		skin_onresize();
		skin_updatescroll();

		set(layer[skin_layer].visible, false);
	</action>

	


	<action name="skin_updatethumbscroll">
		copy(padding,skin_settings.thumbs_padding);

		if(skin_settings.thumbs_scrollbuttons,
			if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
			if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
		  );

		if(skin_settings.thumbs_scrollindicator,
			if(woverflow GT 0,
				set(layer[skin_thumbs_scrollindicator].visible,true);
				sub(iw,pixelwidth,woverflow);
				div(pw,iw,pixelwidth);
				div(px,loverflow,woverflow);
				mul(pw,iw);
				copy(layer[skin_thumbs_scrollindicator].width,pw);
				sub(iw,pw);
				sub(iw,padding);
				sub(iw,padding);
				mul(px,iw);
				add(px,padding);
				copy(layer[skin_thumbs_scrollindicator].x,px);
			  ,
				set(layer[skin_thumbs_scrollindicator].visible,false);
			  );
		  );
	</action>


	<action name="skin_update_scene_infos">
		if(xml.scene !== null AND scene[get(xml.scene)].index GE 0,

			if(skin_settings.title,
				if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
				delayedcall(0.1, set(layer[skin_title].visible,true) );
			  );

			if(skin_settings.thumbs_loop == false,
				if(scene[get(xml.scene)].index GT 0,
					set(layer[skin_btn_prev].enabled, true);
					set(layer[skin_btn_prev].alpha, 1.0);
				  ,
					set(layer[skin_btn_prev].enabled, false);
					set(layer[skin_btn_prev].alpha, 0.3);
				  );

				sub(lastsceneindex, scene.count, 1);
				if(scene[get(xml.scene)].index LT lastsceneindex,
					set(layer[skin_btn_next].enabled, true);
					set(layer[skin_btn_next].alpha, 1.0);
				  ,
					set(layer[skin_btn_next].enabled, false);
					set(layer[skin_btn_next].alpha, 0.3);
				  );
			  ,
				if(scene.count GT 1,
					set(layer[skin_btn_prev].enabled, true);
					set(layer[skin_btn_prev].alpha, 1.0);
					set(layer[skin_btn_next].enabled, true);
					set(layer[skin_btn_next].alpha, 1.0);
				  ,
					set(layer[skin_btn_prev].enabled, false);
					set(layer[skin_btn_prev].alpha, 0.3);
					set(layer[skin_btn_next].enabled, false);
					set(layer[skin_btn_next].alpha, 0.3);
				  );
			  );

			if(scene.count GT 1,
				set(layer[skin_btn_prev_fs].visible, true);
				set(layer[skin_btn_next_fs].visible, true);
			  ,
				set(layer[skin_btn_prev_fs].visible, false);
				set(layer[skin_btn_next_fs].visible, false);
			  );

			txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index));
			if(layer[get(parentname)],
				set(layer[skin_thumbborder].parent, get(parentname));
				set(layer[skin_thumbborder].visible, true);
			  ,
				set(layer[skin_thumbborder].visible, false);
			  );

			if(scene[get(xml.scene)].mapspotname,
				layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
				layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
			  );

			if(plugin[skin_gyro].isavailable == true AND view.vlookatrange == 180,
				set(layer[skin_btn_gyro].visible, true);
			  ,
				set(layer[skin_btn_gyro].visible, false)
			  );

			if(view.vlookatrange LT 180,
				if(backup_control_bouncinglimits === null,
					copy(backup_control_bouncinglimits, control.bouncinglimits);
				  );
				set(control.bouncinglimits, false);
			  ,
				if(backup_control_bouncinglimits !== null,
					copy(control.bouncinglimits, backup_control_bouncinglimits);
				  );
			  );

			if(scene[get(xml.scene)].isvideopano AND plugin[video] !== null,
				skin_video_addcontrols();
			  ,
				skin_video_removecontrols();
			  );
		  );
	</action>



	<action name="skin_showloading">
		if(display.stereo == true,
			set(layer[skin_loadingtext].visible, false);
		  ,
			set(layer[skin_loadingtext].visible, %1);
		  );
	</action>


	<action name="skin_hidetooltips">
		set(layer[skin_tooltip].alpha,0.0);
		set(layer[skin_tooltip].visible,false);
	</action>


	<action name="skin_buttonglow">
		if('%1' !== 'null',
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default,
				set(layer[skin_buttonglow].parent, null);
				set(layer[skin_buttonglow].visible, false);
			  );
		  );
	</action>


	<action name="skin_calc_opened_closed">
		if(layer[get(name)].y_closed === null,
			set(layer[get(name)].y_opened, get(layer[get(name)].y));
			set(layer[get(name)].y_closed, calc(layer[get(name)].y - skin_settings.controlbar_offset - skin_settings.controlbar_height + skin_settings.controlbar_offset_closed));
		  );
	</action>


	<action name="skin_hideskin">
		callwith(layer[skin_scroll_window],   skin_calc_opened_closed() );
		callwith(layer[skin_splitter_bottom], skin_calc_opened_closed() );
		callwith(layer[skin_control_bar],     skin_calc_opened_closed() );
		
		if(layer[skin_map].state    != 'closed', skin_showmap(false);    wait(0.40); );
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );

		set(hidetime, calc('%1' == 'instant' ? 0.0 : 0.5));
		tween(layer[skin_scroll_window].y,   get(layer[skin_scroll_window  ].y_closed), get(hidetime));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_closed), get(hidetime));
		tween(layer[skin_control_bar].y,     get(layer[skin_control_bar    ].y_closed), get(hidetime));

		tween(layer[skin_btn_prev_fs].x, 0, get(hidetime));
		tween(layer[skin_btn_next_fs].x, 0, get(hidetime));

		if(layer[skin_logo], tween(layer[skin_logo].alpha, 0.0, 0.5, default, set(layer[skin_logo].visible,false)); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, true);
		delayedcall(skin_btn_show_alpha, get(hidetime), tween(layer[skin_btn_show].alpha, 0.25, 0.25); );
	</action>


	<action name="skin_showskin">
		tween(layer[skin_scroll_window  ].y, get(layer[skin_scroll_window  ].y_opened));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_opened));
		tween(layer[skin_control_bar    ].y, get(layer[skin_control_bar    ].y_opened));

		tween(layer[skin_btn_prev_fs].x, -50);
		tween(layer[skin_btn_next_fs].x, -50);

		if(layer[skin_logo], set(layer[skin_logo].visible,true); tween(layer[skin_logo].alpha, 1.0); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, false);
		delayedcall(skin_btn_show_alpha, 0.25, tween(layer[skin_btn_show].alpha, 0.0, 0.0); );
	</action>


	<action name="skin_showthumbs">
		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(show,
			set(layer[skin_thumbs].state, 'opened');
			tween(layer[skin_thumbs].alpha, 1.0, 0.25);
			add(mh, layer[skin_thumbs].height);
			add(mh, layer[skin_scroll_layer].y_offset);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_thumbs].alpha, 0.0, 0.25, easeOutQuint);
			add(mh, layer[skin_scroll_layer].y_offset);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
		  );
	</action>


	<action name="skin_showmap">
		if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(show,
			tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));
			set(layer[skin_map].visible, true);
			tween(layer[skin_map].alpha, 1.0, 0.25);
			set(layer[skin_map].state, 'opened');
			sub(hh,area.pixelheight,skin_settings.controlbar_offset);
			sub(hh,layer[skin_control_bar].height);
			sub(hh,32);
			add(mh,hh);
			sub(hh,skin_settings.controlbar_overlap);
			copy(layer[skin_map].height, hh);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
		  ,
		  	if(layer[skin_map].state != 'closed',
				set(layer[skin_map].state, 'closed');
				add(mh, layer[skin_scroll_layer].y_offset);
				tween(layer[skin_map].alpha, 0.0, 0.5, easeOutQuint);
				tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
			  );
		  );
	</action>


	<action name="skin_keydown_event">
		if(keycode == 33, skin_nextscene_loop(-1) );            	<!-- Page Up   - previous scene -->
		if(keycode == 34, skin_nextscene_loop(+1) );            	<!-- Page Dowm - next scene -->
		if(keycode == 35, skin_gotoscene(calc(scene.count-1)) );	<!-- End       - last scene -->
		if(keycode == 36, skin_gotoscene(0) );                  	<!-- Home/Pos1 - first scene -->
	</action>


	<action name="skin_deeplinking_update_url">
		if(skin_settings.deeplinking AND (!webvr OR webvr.isenabled === false),
			delayedcall(skin_deeplinking_update, calc(%1 == null ? 0.1 : %1), skin_deeplinking_update_url_process() );
		  );
	</action>
	
	<action name="skin_deeplinking_update_url_process">
		copy(adr, browser.location);
		indexoftxt(qi, get(adr), '?');
		if(qi GT 0, subtxt(adr, adr, 0, get(qi)));
		copy(si, scene[get(xml.scene)].index);
		copy(h, view.hlookat);
		copy(v, view.vlookat);
		copy(f, view.fov);
		copy(d, view.distortion);
		copy(a, view.architectural);
		clamp(d, 0.0, 1.0);
		clamp(a, 0.0, 1.0);
		set(pp, calc(f LT 10 ? 6 : 2));
		roundval(h, get(pp));
		roundval(v, get(pp));
		roundval(f, get(pp));
		roundval(d, 2);
		roundval(a, 1);
		set(adr, calc(adr + '?startscene=' + si + '&amp;startactions=lookat('+h+','+v+','+f+','+d+','+a+');'));
		js( history.replaceState(null, document.title, get(adr)); );
	</action>


	<!-- reload the scene when there is a special image for VR -->
	<action name="skin_reloadscene_webvr">
		delayedcall(0.1,
			if(scene[get(xml.scene)].havevrimage,
				loadscene(get(xml.scene), null, MERGE|KEEPVIEW|KEEPMOVING|KEEPHOTSPOTS|NOPREVIEW, BLEND(0.5));
			  );
		  );
	</action>


	<!-- videopano support - http://krpano.com/plugins/videoplayer/ -->
	<action name="skin_video_addcontrols">
		set(events[skin_events].onclick, skin_video_clickevent() );

		set(plugin[video].onvideoready, skin_video_updatestate() );
		set(plugin[video].onvideoplay, skin_video_updatestate() );
		set(plugin[video].onvideopaused, skin_video_updatestate() );
		set(plugin[video].onvideocomplete, skin_video_updatestate() );

		if(plugin[video].ispaused AND plugin[video].pausedonstart,
			set(layer[skin_video_playpause].state, 'visible');
			set(layer[skin_video_playpause].enabled, true);
			tween(layer[skin_video_playpause].alpha, 1.0);
		  );

		delayedcall(skin_video_delayedvisible, 0.25, set(layer[skin_video_controls].visible, true) );

		skin_video_updateseekbarwidth();
		set(layer[skin_video_seekpos].x,0);
		set(layer[skin_video_loadbar].width,0);

		setinterval(skin_video_seek_updates, 0.5, skin_video_updatetime() );
	</action>

	<action name="skin_video_removecontrols">
		stopdelayedcall(skin_video_delayedvisible);

		set(events[skin_events].onclick, null);

		set(layer[skin_video_playpause].alpha, 0.0);
		set(layer[skin_video_controls].visible, false);

		clearinterval(skin_video_seek_updates);
	</action>

	<action name="skin_video_updatetime">
		copy(t1, plugin[video].time);
		copy(t2, plugin[video].totaltime);
		if(%1 !== null, calc(t1, %1 * t2); );
		div(t1_min, t1, 60);
		mod(t1_sec, t1, 60);
		Math.floor(t1_min);
		Math.floor(t1_sec);
		div(t2_min, t2, 60);
		mod(t2_sec, t2, 60);
		Math.floor(t2_min);
		Math.floor(t2_sec);
		calc(layer[skin_video_time].html, t1_min + ':' + (t1_sec LT 10 ? '0' : '') + t1_sec + ' / ' + t2_min + ':' + (t2_sec LT 10 ? '0' : '') + t2_sec);
		calc(layer[skin_video_seekpos].x, (t1 / t2 * 100) + '%');
		calc(layer[skin_video_loadbar].width, (plugin[video].loadedbytes / plugin[video].totalbytes * 100) + '%');
	</action>

	<action name="skin_video_updateseekbarwidth">
		if(skin_settings.title,
			calc(layer[skin_video_seekbar_container].width, 0 - (32 + layer[skin_title].pixelwidth + layer[skin_video_time].pixelwidth));
			calc(layer[skin_video_seekbar_container].x, layer[skin_title].pixelwidth + 16);
		  ,
			calc(layer[skin_video_seekbar_container].width, 0 - (24 + layer[skin_video_time].pixelwidth));
			set(layer[skin_video_seekbar_container].x, 8);
		  );
	</action>

	<action name="skin_video_ondownseeking">
		asyncloop(pressed,
			screentolayer(skin_video_seekbar, mouse.stagex,mouse.stagey, lx,ly);
			calc(seekpos, lx / layer[skin_video_seekbar].pixelwidth);
			clamp(seekpos, 0.0, 1.0);
			skin_video_updatetime(seekpos);
		  ,
			plugin[video].seek(calc((seekpos * 100) + '%'));
		  );
	</action>

	<action name="skin_video_updatestate">
		calc(layer[skin_video_playpause].crop, plugin[video].ispaused ? '0|640|64|64' : '64|640|64|64');
		if(plugin[video].iscomplete,
			set(layer[skin_video_playpause].state, 'visible');
			tween(layer[skin_video_playpause].alpha, 1.0);
		  );
	</action>

	<action name="skin_video_playpause_click">
		if(plugin[video].ispaused,
			plugin[video].play();
			set(layer[skin_video_playpause].state, 'hidden');
			tween(layer[skin_video_playpause].alpha, 0.0);
		  ,
			plugin[video].pause();
			set(layer[skin_video_playpause].state, 'visible');
			tween(layer[skin_video_playpause].alpha, 1.0);
			delayedcall(autohide_pp, 2.0, set(layer[skin_video_playpause].state,'hidden'); tween(layer[skin_video_playpause].alpha, 0.0); );
		  );
	</action>

	<action name="skin_video_clickevent">
		stopdelayedcall(autohide_pp);

		switch(layer[skin_video_playpause].state, 'visible', 'hidden');

		if(layer[skin_video_playpause].state == 'hidden',
			tween(layer[skin_video_playpause].alpha, 0.0);
		  ,
			tween(layer[skin_video_playpause].alpha, 1.0);
			delayedcall(autohide_pp, 2.0, set(layer[skin_video_playpause].state,'hidden'); tween(layer[skin_video_playpause].alpha, 0.0); );
		  );
	</action>


	<!-- context menu - http://krpano.com/docu/xml/#contextmenu -->
	<contextmenu>
		<item name="kr" caption="KRPANO"     />
		<item name="fs" caption="FULLSCREEN" />
		<item name="cc" caption="Change Controlmode" onclick="skin_changecontrolmode();"  separator="true" />
		<item name="nv" caption="Normal View"        onclick="skin_view_normal();"        showif="view.vlookatrange == 180" separator="true"      />
		<item name="fv" caption="Fisheye View"       onclick="skin_view_fisheye();"       showif="view.vlookatrange == 180" devices="flash|webgl" />
		<item name="sv" caption="Stereographic View" onclick="skin_view_stereographic();" showif="view.vlookatrange == 180" devices="flash|webgl" />
		<item name="av" caption="Architectural View" onclick="skin_view_architectural();" showif="view.vlookatrange == 180"                       />
		<item name="pv" caption="Pannini View"       onclick="skin_view_pannini();"       showif="view.vlookatrange == 180" devices="flash|webgl" />
		<item name="lp" caption="Little Planet View" onclick="skin_view_littleplanet();"  showif="view.vlookatrange == 180" devices="flash|webgl" />
	</contextmenu>


	<action name="skin_changecontrolmode">
		switch(control.mouse, moveto, drag);
		switch(control.touch, moveto, drag);
	</action>

	<action name="skin_view_look_straight">
		if(view.vlookat LT -80 OR view.vlookat GT +80,
			tween(view.vlookat, 0.0, 1.0, easeInOutSine);
			tween(view.fov,     100, distance(150,0.8));
		  );
		skin_deeplinking_update_url(1.0);
	</action>

	<action name="skin_view_normal">
		skin_view_look_straight();
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    0.0, distance(1.0,0.5));
	</action>

	<action name="skin_view_fisheye">
		skin_view_look_straight();
		tween(view.architectural, 0.0,  distance(1.0,0.5));
		tween(view.pannini,       0.0,  distance(1.0,0.5));
		tween(view.distortion,    0.35, distance(1.0,0.5));
	</action>

	<action name="skin_view_architectural">
		skin_view_look_straight();
		tween(view.architectural, 1.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    0.0, distance(1.0,0.5));
	</action>

	<action name="skin_view_stereographic">
		skin_view_look_straight();
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    1.0, distance(1.0,0.8));
	</action>

	<action name="skin_view_pannini">
		skin_view_look_straight();
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       1.0, distance(1.0,0.8));
		if(view.distortion LT 0.1,
			tween(view.distortion, 1.0, distance(1.0,0.8));
		  );
	</action>

	<action name="skin_view_littleplanet">
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    1.0, distance(1.0,0.8));
		tween(view.fov,           150, distance(150,0.8));
		tween(view.vlookat,        90, distance(100,0.8));
		add(new_hlookat, view.hlookat, 123.0);
		tween(view.hlookat, get(new_hlookat), distance(100,0.8));
		skin_deeplinking_update_url(1.0);
	</action>

</krpano>
